---
title: 'Mutiple level calculation 3'
date: '2023-04-10'
author: Qing Zou
categories: ['R', 'rtables']
description: 'summary counts by summarize_row_groups'
execute:
  message: false
  warning: false
editor_options:
  chunk_output_type: console
format:
  html:
    page-layout: full

---


```{r rcell3sd45}
#| echo: false
#| eval: true

#' a pair of functions sprintf_format and format_values used for rcell
#'
#' @param n Unique number of events for the current category
#' @param N Total number of events under the split column
#' @param decimal Number of decimal to display
#' @param type to decide if the denominator n/N(%) in the result
#' @keywords sprintf_format
#'
#' @return
sprintf_format_helper <- function(n, N, decimal = 1, type = "n(%)") {
  showN <- NULL
  if (type == "n/N(%)"){
    showN <- "/%.0f"
  }

  if (n == 0) {
    fmt <- sprintf_format(paste0("%.0f", showN))
  } else if (n == N) {
    # if pct == 100%, then show (100) instead of (100.0)
    fmt <- sprintf_format(paste0("%.0f", showN, " ", "(%.0f)"))
  } else {
    fmt <- sprintf_format(paste0("%.0f", showN, " (%.", decimal, "f)"))
  }

  return(fmt)
}


#' a pair of functions sprintf_format and format_values used for rcell
#'
#' @param n Unique number of events for the current category
#' @param N Total number of events under the split column
#' @param type to decide if the denominator n/N(%) in the result
#'
#' @keywords format_values
#' @example
#' rcell(x = format_values_helper(1, 10),
#'       format = sprintf_format_helper(1, 10))
#'
#' rcell(x = format_values_helper(1, 10, type = "n/N(%)"),
#'       format = sprintf_format_helper(1, 10, type = "n/N(%)"))
#'
#' rcell(x = format_values_helper(10, 10),
#'       format = sprintf_format_helper(10, 10))
#'
#' @return
format_values_helper <- function(n, N, type = "n(%)") {
  showN <- NULL
  if (type == "n/N(%)"){
    showN <- N
  }
  if (n == 0) {
    value <- c(0, showN)
  } else {
    value <- c(n, showN, n / N * 100)
  }

  return(value)
}

#' Display rtables in html
#'
#' @param table a rtables object
#' @param to_html export to HTML. Default TRUE
#'
#' @return a html table
#' @export
table_to_html <- function(table, to_html = TRUE) {
  stopifnot(!is.null(table), class(table) %in% c("TableTree", "ElementaryTable"))

  extra_css <- "
  .tabwid {overflow-x: scroll; display: block;}
  .tabwid table td p {min-width: 170px !important;}
  .tabwid table td:first-child > p {min-width: 200px !important;}
  .tabwid table tr:hover {background-color: #ffff99 !important;}
  "
  flextable::set_flextable_defaults(
    font.family = ifelse(to_html, "Source Sans Pro", "Verdana"),
    extra_css = extra_css
  )

  ft <- rtables::tt_to_flextable(table) %>%
    flextable::border_remove() %>%
    flextable::bold(bold = TRUE, part = "header") %>%
    flextable::hline_top(part = "body") %>%
    flextable::hline_bottom(part = "body") %>%
    flextable::autofit()

  if (to_html) {
    flextable::htmltools_value(ft)
  } else {
    ft
  }
}
count_items_cfun <- function(df,
                        labelstr,
                        .spl_context,
                        n_var,
                        n_unique_keys = NULL,
                        N_var = NULL,
                        N_index = NULL,
                        N_unique_keys = NULL,
                        empty_row = FALSE,
                        hide_value = FALSE,
                        format = "n/N(%)") {

  # caculate the value
  df_n <- df
  if (!is.null(n_unique_keys)) {
    df_n <- df %>% distinct(across(n_unique_keys), .keep_all = T)
  }
  x <- df_n[[n_var]]
  n <- sum(x[!is.na(x)])

  cur_index <- which(.spl_context[["value"]] == labelstr)
  # View(df)
  if (!is.null(N_var)) {

    # get N of parent for denomitor caculation
    if (!is.null(N_index)) {
      parent_df <- .spl_context$full_parent_df[[N_index]][.spl_context[["cur_col_subset"]][[N_index]], ]
    } else {
      parent_df <- .spl_context$full_parent_df[[cur_index - 1]][.spl_context[["cur_col_subset"]][[cur_index - 1]], ]
    }

    if (!is.null(N_unique_keys)) {
      parent_df <-  parent_df %>% distinct(across(N_unique_keys), .keep_all = T)
    }


    parent_x <- parent_df[[N_var]]
    parent_N <- sum(!is.na(parent_x[!is.na(parent_x)]))

    # get current value to check if it match the last value of levels, for empty row
    # !Start
    var_levels <- length(.spl_context$split)
    curr_var_level_val <- .spl_context$value[[nrow(.spl_context)]]
    last_var_level_val <-
      .spl_context$full_parent_df[[nrow(.spl_context)]][[.spl_context$split[var_levels]]] %>%
      levels() %>%
      tail(1)
    if (curr_var_level_val == last_var_level_val & empty_row) {
      ret <- in_rows(
        .names = c(labelstr, " "),
        .list = list(c(format_values_helper(n, parent_N, type = format)), NULL),
        .formats = c(sprintf_format_helper(n, parent_N, type = format), "xx")
      )
    } else {
      rc <- rcell(
        x = format_values_helper(n, parent_N, type = format),
        format = sprintf_format_helper(n, parent_N, type = format)
      )
      ret <- in_rows(.names = labelstr, rc)
    }
    # !End
  } else {
    rc <- rcell(
      x = ifelse(hide_value, "", n),
      format = "xx"
    )
    ret <- in_rows(.names = labelstr, rc)
  }
  return(ret)
}
```


```{r cal1}
library(rtables)
library(formatters)
library(dplyr)
library(stringr)
```

## Method 2

```{r cal2}
#| echo: false
#| eval: true
df <- data.frame(SUBJID = c(rep('S1', 5), rep("S2", 4), rep("S3", 2)),
                 ASEQ = c(1:5, 1:4, 1:2),
                 GROUP = factor(c(rep('A', 5), rep("B", 4), rep('A', 2)), levels = c("A", "B")),
                 PARAMCD = c('TEST_1', 'TEST_1', 'TEST_1', 'TEST_1', 'TEST_2', 'TEST_1', 'TEST_1', 'TEST_2', 'TEST_2', 'TEST_1', 'TEST_2'),
                 CRIT = c('LEVEL_2_1','LEVEL_2_1', 'LEVEL_2_2', NA_character_, 'LEVEL_2_a', 'LEVEL_2_1', NA_character_, 'LEVEL_2_a', 'LEVEL_2_b', NA_character_, 'LEVEL_2_b'))
```
Another powerful function rtables provide to us is the function `summarize_row_groups`, which can be used to add a content row of summary counts.

This function need a different data structure from the `rtable::analyze()`.
`rtable::analyze()` is kind of the columns-based analysis, the `summarize_row_groups` is more like the rows-based analysis.

To build the data:

- create the 1st level columns by `PARAMCD`, `TEST_1_level_1`, `TEST_2_level_1`
- Create the 2rd level columns by `CRIT`, `TEST_1_level_2`, `TEST_2_level_2`

```{r cal2df}
#| echo: true
#| eval: true

param_coding <- c('TEST_1' = 'This is test 1',
                  'TEST_2' = 'This is test 2')
df <- df %>% mutate(PARAML = param_coding[PARAMCD])
tmp <- df
tmp[, str_c(names(param_coding), '_level_1')] <- NA_character_


# tmp1 <- df %>% mutate(TEST_1_level_1 = ifelse(PARAMCD == 'TEST_1', PARAMCD, NA_character_),
#                       TEST_2_level_1 = ifelse(PARAMCD == 'TEST_2', PARAMCD, NA_character_),
#                       TEST_1_aval_1 = ifelse(!is.na(TEST_1_level_1), 1, NA_character_),
#                       TEST_1_aval_1 = ifelse(!is.na(TEST_2_level_1), 1, NA_character_),
#                       TEST_1_level_2 = ifelse(PARAMCD == 'TEST_1' & !is.na(CRIT), CRIT, NA_character_),
#                       TEST_2_level_2 = ifelse(PARAMCD == 'TEST_2' & !is.na(CRIT), CRIT, NA_character_),
#                       TEST_1_aval_2 = ifelse(!is.na(TEST_1_level_2), 1, NA_character_),
#                       TEST_2_aval_2 = ifelse(!is.na(TEST_2_level_2), 1, NA_character_)
#                       )

tmp1 <- tmp %>%
  mutate(
    across(
      .cols = c("TEST_1_level_1", "TEST_2_level_1"),
      .fns = \(x)  factor(ifelse(grepl(gsub("_level_1", "",cur_column()), PARAMCD), PARAML, x))
    )
    ,
    across(c(do.call(str_c, expand.grid(names(param_coding), c('_level_1')))),
           ~ifelse(!is.na(.x), 1, .x),
           .names = "{gsub('level','aval', .col)}")
    )


tmp1[, str_c(names(param_coding), '_level_2')] <- NA_character_


fmt <- list(
  'TEST_1_level_2' = c('LEVEL_2_1' = '1 of level 2',
               'LEVEL_2_2' = '2 of level 2',
               'LEVEL_2_3' = '3 of level 2'),
  "TEST_2_level_2" = c('LEVEL_2_a' = 'a of level 2',
               'LEVEL_2_b' = 'b of level 2',
               'LEVEL_2_c' = 'c of level 2')
)

tmp2 <- tmp1 %>%
  mutate(
    across(
      .cols = c("TEST_1_level_2", "TEST_2_level_2"),
      .fns = \(x)  factor(ifelse(grepl(gsub("_level_2", "",cur_column()), PARAMCD) & !is.na(CRIT) , fmt[[cur_column()]][CRIT], x), levels = fmt[[cur_column()]])
    ),
    across(c(do.call(str_c, expand.grid(names(param_coding), c('_level_2')))),
           ~ifelse(!is.na(.x), 1, .x),
           .names = "{gsub('level','aval', .col)}")
  )
```

## Wrap the analysis function



```{r a23s}
#| echo: true
#| eval: true
#| message: FALSE

tbl_recipe <- basic_table() %>%
  rtables::split_cols_by(var = "GROUP") %>%
  add_overall_col("All") %>%
  ## 1st-level row-wise splitting, and its column-wise analysis function
  rtables::split_rows_by("TEST_1_level_1", split_fun = remove_split_levels(c(NA_character_))) %>%
  rtables::summarize_row_groups(cfun = count_items_cfun,
                                extra_args = list(n_var = "TEST_1_aval_1", n_unique_keys = "SUBJID", hide_value = TRUE)) %>%
  ## 2nd-level row-wise splitting, and its column-wise analysis function, use n_unique_keys to remove duplicated records
  rtables::split_rows_by("TEST_1_level_2") %>%
  rtables::summarize_row_groups(cfun = count_items_cfun, extra_args = list(
    n_var = "TEST_1_aval_2", n_unique_keys = c("SUBJID"), N_var = "TEST_1_aval_1", N_unique_keys = "SUBJID",
    empty_row = TRUE
  ))

col_counts_df <- tmp2 %>%
  distinct(SUBJID, GROUP)
col_counts <- table(col_counts_df$GROUP)
col_counts <- c(col_counts, sum(col_counts))
test1_tbl <- tbl_recipe %>%
  rtables::build_table(tmp2, col_counts = col_counts)
```
```{r}
#| echo: false
#| eval: true
#| message: FALSE
table_to_html(test1_tbl, to_html = FALSE)
```

```{r a23ssdf}
#| echo: true
#| eval: true
#| message: FALSE

count_items_cfun <- function(df,
                        labelstr,
                        .spl_context,
                        n_var,
                        n_unique_keys = NULL,
                        N_var = NULL,
                        N_index = NULL,
                        N_unique_keys = NULL,
                        empty_row = FALSE,
                        hide_value = FALSE,
                        format = "n/N(%)") {

  # caculate the value
  df_n <- df
  if (!is.null(n_unique_keys)) {
    df_n <- df %>% distinct(across(n_unique_keys), .keep_all = T)
  }
  x <- df_n[[n_var]]
  n <- sum(x[!is.na(x)])

  cur_index <- which(.spl_context[["value"]] == labelstr)
  # View(df)
  if (!is.null(N_var)) {

    # get N of parent for denomitor caculation
    if (!is.null(N_index)) {
      parent_df <- .spl_context$full_parent_df[[N_index]][.spl_context[["cur_col_subset"]][[N_index]], ]
    } else {
      parent_df <- .spl_context$full_parent_df[[cur_index - 1]][.spl_context[["cur_col_subset"]][[cur_index - 1]], ]
    }

    if (!is.null(N_unique_keys)) {
      parent_df <-  parent_df %>% distinct(across(N_unique_keys), .keep_all = T)
    }


    parent_x <- parent_df[[N_var]]
    parent_N <- sum(!is.na(parent_x[!is.na(parent_x)]))

    # get current value to check if it match the last value of levels, for empty row
    # !Start
    var_levels <- length(.spl_context$split)
    curr_var_level_val <- .spl_context$value[[nrow(.spl_context)]]
    last_var_level_val <-
      .spl_context$full_parent_df[[nrow(.spl_context)]][[.spl_context$split[var_levels]]] %>%
      levels() %>%
      tail(1)
    if (curr_var_level_val == last_var_level_val & empty_row) {
      ret <- in_rows(
        .names = c(labelstr, " "),
        .list = list(c(format_values_helper(n, parent_N, type = format)), NULL),
        .formats = c(sprintf_format_helper(n, parent_N, type = format), "xx")
      )
    } else {
      rc <- rcell(
        x = format_values_helper(n, parent_N, type = format),
        format = sprintf_format_helper(n, parent_N, type = format)
      )
      ret <- in_rows(.names = labelstr, rc)
    }
    # !End
  } else {
    rc <- rcell(
      x = ifelse(hide_value, "", n),
      format = "xx"
    )
    ret <- in_rows(.names = labelstr, rc)
  }
  return(ret)
}




tbl_recipe <- basic_table() %>%
  rtables::split_cols_by(var = "GROUP") %>%
  add_overall_col("All") %>%
  ## 1st-level row-wise splitting, and its column-wise analysis function
  rtables::split_rows_by("TEST_2_level_1", split_fun = remove_split_levels(c(NA_character_))) %>%
  rtables::summarize_row_groups(cfun = count_items_cfun,
                                extra_args = list(n_var = "TEST_2_aval_1", n_unique_keys = "SUBJID", hide_value = TRUE)) %>%
  ## 2nd-level row-wise splitting, and its column-wise analysis function, use n_unique_keys to remove duplicated records
  rtables::split_rows_by("TEST_2_level_2") %>%
  rtables::summarize_row_groups(cfun = count_items_cfun, extra_args = list(
    n_var = "TEST_2_aval_2", n_unique_keys = c("SUBJID"), N_var = "TEST_2_aval_1", N_unique_keys = "SUBJID",
    empty_row = TRUE
  ))


test2_tbl <- tbl_recipe %>%
  rtables::build_table(tmp2, col_counts = col_counts)
```
```{r}
#| echo: false
#| eval: true
#| message: FALSE
table_to_html(test2_tbl, to_html = FALSE)
```

```{r a23ssdfdf}
#| echo: true
#| eval: true
#| message: FALSE

tbl2 <- rbind(test1_tbl, test2_tbl)

```

```{r}
#| echo: false
#| eval: true
#| message: FALSE
table_to_html(tbl2, to_html = FALSE)
```
